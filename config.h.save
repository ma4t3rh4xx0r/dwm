/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 2;        /* border pixel of windows */
static const unsigned int gappx     = 25;        /* gap pixel between windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const char *fonts[]          = { "JetBrainsMono Nerd Font:size=12" };
static const char dmenufont[]       = "monospace:size=10";
static const char col_gray1[]       = "#000000";
static const char col_cyan[]        = "#46d9ff";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_cyan, col_gray1, col_cyan },
	[SchemeSel]  = { col_gray1, col_cyan,  col_cyan  },
};

/* tagging */
static const char *tags[] = { "h", "4", "x", "x", "0", "r", "4", "2", "0" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
        /* class      instance    title       tags mask     isfloating          monitor */
        { "Gimp",     NULL,       NULL,       0,            1,                  -1 },
	{ "Firefox",  NULL,       NULL,       1 << 8,       0,                  -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
};

/* key definitions */
#define MODKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-b", NULL };
static const char *termcmd[]  = { "st", NULL };
static const char *browser[]  = { "firefox", NULL };
static const char *discord[]  = { "firejail", "discord", NULL };
static const char *volup[]    = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "+1000", NULL };
static const char *voldown[]  = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "-1000", NULL };
static const char *mute[]     = { "amixer", "-q", "-D" ,"pulse", "sset" ,"Master", "toggle", NULL };
static const char *youtube[]  = { "st", "./yts.sh", "-m", NULL };
static const char *screenshot[] = { "spectacle", NULL };
static const char *reboot[] = { "reboot", NULL };
static const char *uplight[] = { "brightnessctl", "s", "+10%", NULL };
static const char *downlight[] = { "brightnessctl", "s", "10%-", NULL };
static const char *noancoare[] = { "firefox", "https://www.youtube.com/watch?v=Z_xp_sHAkq4", NULL };
static const char *screenturnoff[] = {"xset", "dpms", "force", "off", NULL };
static const char *switchwin[] = {"dmenu-win", NULL };
static const char *ranger[] = {"st", "ranger", NULL };
static Key keys[] = {
	/* modifier         key                           function        argument */
	{ MODKEY,           XK_o,                         spawn,          {.v = dmenucmd } },
	{ MODKEY,           XK_e,                         spawn,          {.v = termcmd } },
        { MODKEY,           XK_z,                         spawn,          {.v = browser } },
        { MODKEY,           XK_x,                         spawn,          {.v = discord } },    
        { 0,                XK_F9,                        spawn,          {.v = mute } },
        { 0,                XK_F11,                       spawn,          {.v = volup } },  
        { 0,                XK_F10,                       spawn,          {.v = voldown } },
        { 0,                XF86XK_MonBrightnessUp,       spawn,          {.v = uplight } },
        { 0,                XF86XK_MonBrightnessDown,     spawn,          {.v = downlight } },
       /* { 0,                XK_F6,                        spawn,          {.v = mute } },*/
       /* { 0,                XK_F8,                        spawn,          {.v = volup } },*/
       /* { 0,                XK_F7,                        spawn,          {.v = voldown } },*/
       /* { 0,                XK_F3,                        spawn,          {.v = uplight } },*/
       /* { 0,                XK_F2,                        spawn,          {.v = downlight } },*/
        { MODKEY,           XK_s,                         spawn,          {.v = screenturnoff } },
        { MODKEY,           XK_q,                         spawn,          {.v = screenshot } },
        { MODKEY,           XK_y,                         spawn,          {.v = youtube } },
        { MODKEY,           XK_minus,                     setgaps,        {.i = -1 } },
        { MODKEY,           XK_equal,                     setgaps,        {.i = +1 } },
        { MODKEY|ShiftMask, XK_equal,                     setgaps,        {.i = 0  } },
        { MODKEY,           XK_w,                         spawn,          {.v = switchwin} },
        { MODKEY|ShiftMask, XK_r,                         spawn,          {.v = reboot } },
	{ MODKEY,           XK_r,                         spawn,          {.v = ranger } },
	{ MODKEY,           XK_m,                         spawn,          {.v = noancoare } },       
	{ MODKEY,           XK_b,                         togglebar,      {0} },
	{ MODKEY,           XK_j,                         focusstack,     {.i = +1 } },
	{ MODKEY,           XK_k,                         focusstack,     {.i = -1 } },
	{ MODKEY,           XK_i,                         incnmaster,     {.i = +1 } },
	{ MODKEY,           XK_d,                         incnmaster,     {.i = -1 } },
	{ MODKEY,           XK_h,                         setmfact,       {.f = -0.05} },
	{ MODKEY,           XK_l,                         setmfact,       {.f = +0.05} },
	{ MODKEY,           XK_Return,                    zoom,           {0} },
	{ MODKEY,           XK_Tab,                       view,           {0} },
	{ MODKEY|ShiftMask, XK_c,                         killclient,     {0} },
	{ MODKEY,           XK_t,                         setlayout,      {.v = &layouts[0]} },
	{ MODKEY,           XK_f,                         setlayout,      {.v = &layouts[1]} },
	{ MODKEY,           XK_0,                         view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask, XK_0,                         tag,            {.ui = ~0 } },
	TAGKEYS(            XK_1,                                         0)
	TAGKEYS(            XK_2,                                         1)
	TAGKEYS(            XK_3,                                         2)
	TAGKEYS(            XK_4,                                         3)
	TAGKEYS(            XK_5,                                         4)
	TAGKEYS(            XK_6,                                         5)
	TAGKEYS(            XK_7,                                         6)
	TAGKEYS(            XK_8,                                         7)
	{ MODKEY|ShiftMask, XK_q,                         quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

